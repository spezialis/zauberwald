{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { IMAGENET_CLASSES } from './imagenet_classes';\r\nvar BASE_PATH = 'https://storage.googleapis.com/tfjs-models/tfjs/';\r\nvar IMAGE_SIZE = 224;\r\nexport function load(version, alpha) {\r\n    if (version === void 0) { version = 1; }\r\n    if (alpha === void 0) { alpha = 1.0; }\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var mobilenet;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (tf == null) {\r\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\r\n                            \"also include @tensorflow/tfjs on the page before using this model.\");\r\n                    }\r\n                    if (version !== 1) {\r\n                        throw new Error(\"Currently only MobileNet V1 is supported. Got version \" + version + \".\");\r\n                    }\r\n                    if ([0.25, 0.50, 0.75, 1.0].indexOf(alpha) === -1) {\r\n                        throw new Error(\"MobileNet constructed with invalid alpha \" +\r\n                            (alpha + \". Valid multipliers are 0.25, 0.50, 0.75, and 1.0.\"));\r\n                    }\r\n                    mobilenet = new MobileNet(version, alpha);\r\n                    return [4, mobilenet.load()];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2, mobilenet];\r\n            }\r\n        });\r\n    });\r\n}\r\nvar MobileNet = (function () {\r\n    function MobileNet(version, alpha) {\r\n        this.intermediateModels = {};\r\n        var multiplierStr = ({ 0.25: '0.25', 0.50: '0.50', 0.75: '0.75', 1.0: '1.0' })[alpha];\r\n        this.path =\r\n            BASE_PATH + \"mobilenet_v\" + version + \"_\" + multiplierStr + \"_\" + IMAGE_SIZE + \"/\" +\r\n                \"model.json\";\r\n        this.normalizationOffset = tf.scalar(127.5);\r\n    }\r\n    MobileNet.prototype.load = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _a, result;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this;\r\n                        return [4, tf.loadModel(this.path)];\r\n                    case 1:\r\n                        _a.model = _b.sent();\r\n                        this.endpoints = this.model.layers.map(function (l) { return l.name; });\r\n                        result = this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3]));\r\n                        return [4, result.data()];\r\n                    case 2:\r\n                        _b.sent();\r\n                        result.dispose();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MobileNet.prototype.infer = function (img, endpoint) {\r\n        var _this = this;\r\n        if (endpoint != null && this.endpoints.indexOf(endpoint) === -1) {\r\n            throw new Error(\"Unknown endpoint \" + endpoint + \". Available endpoints: \" +\r\n                (this.endpoints + \".\"));\r\n        }\r\n        return tf.tidy(function () {\r\n            if (!(img instanceof tf.Tensor)) {\r\n                img = tf.fromPixels(img);\r\n            }\r\n            var normalized = img.toFloat()\r\n                .sub(_this.normalizationOffset)\r\n                .div(_this.normalizationOffset);\r\n            var resized = normalized;\r\n            if (img.shape[0] !== IMAGE_SIZE || img.shape[1] !== IMAGE_SIZE) {\r\n                var alignCorners = true;\r\n                resized = tf.image.resizeBilinear(normalized, [IMAGE_SIZE, IMAGE_SIZE], alignCorners);\r\n            }\r\n            var batched = resized.reshape([1, IMAGE_SIZE, IMAGE_SIZE, 3]);\r\n            var model;\r\n            if (endpoint == null) {\r\n                model = _this.model;\r\n            }\r\n            else {\r\n                if (_this.intermediateModels[endpoint] == null) {\r\n                    var layer = _this.model.layers.find(function (l) { return l.name === endpoint; });\r\n                    _this.intermediateModels[endpoint] =\r\n                        tf.model({ inputs: _this.model.inputs, outputs: layer.output });\r\n                }\r\n                model = _this.intermediateModels[endpoint];\r\n            }\r\n            return model.predict(batched);\r\n        });\r\n    };\r\n    MobileNet.prototype.classify = function (img, topk) {\r\n        if (topk === void 0) { topk = 3; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var logits, classes;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        logits = this.infer(img);\r\n                        return [4, getTopKClasses(logits, topk)];\r\n                    case 1:\r\n                        classes = _a.sent();\r\n                        logits.dispose();\r\n                        return [2, classes];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return MobileNet;\r\n}());\r\nexport { MobileNet };\r\nfunction getTopKClasses(logits, topK) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var values, valuesAndIndices, i, topkValues, topkIndices, i, topClassesAndProbs, i;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4, logits.data()];\r\n                case 1:\r\n                    values = _a.sent();\r\n                    valuesAndIndices = [];\r\n                    for (i = 0; i < values.length; i++) {\r\n                        valuesAndIndices.push({ value: values[i], index: i });\r\n                    }\r\n                    valuesAndIndices.sort(function (a, b) {\r\n                        return b.value - a.value;\r\n                    });\r\n                    topkValues = new Float32Array(topK);\r\n                    topkIndices = new Int32Array(topK);\r\n                    for (i = 0; i < topK; i++) {\r\n                        topkValues[i] = valuesAndIndices[i].value;\r\n                        topkIndices[i] = valuesAndIndices[i].index;\r\n                    }\r\n                    topClassesAndProbs = [];\r\n                    for (i = 0; i < topkIndices.length; i++) {\r\n                        topClassesAndProbs.push({\r\n                            className: IMAGENET_CLASSES[topkIndices[i]],\r\n                            probability: topkValues[i]\r\n                        });\r\n                    }\r\n                    return [2, topClassesAndProbs];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/nsthorat/Code/deeplearnjs-clients/models/tfjs-models/mobilenet/index.d.ts","text":"import * as tf from '@tensorflow/tfjs';\r\nexport declare type MobileNetVersion = 1;\r\nexport declare type MobileNetAlpha = 0.25 | 0.50 | 0.75 | 1.0;\r\nexport declare function load(version?: MobileNetVersion, alpha?: MobileNetAlpha): Promise<MobileNet>;\r\nexport declare class MobileNet {\r\n    endpoints: string[];\r\n    private path;\r\n    private model;\r\n    private intermediateModels;\r\n    private normalizationOffset;\r\n    constructor(version: MobileNetVersion, alpha: MobileNetAlpha);\r\n    load(): Promise<void>;\r\n    infer(img: tf.Tensor3D | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, endpoint?: string): tf.Tensor;\r\n    classify(img: tf.Tensor3D | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, topk?: number): Promise<Array<{\r\n        className: string;\r\n        probability: number;\r\n    }>>;\r\n}\r\n"}}
